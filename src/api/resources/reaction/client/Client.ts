/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as CommonApi from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Reaction {
    export interface Options {
        environment?: core.Supplier<environments.CommonApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Override the address header */
        address?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the address header */
        address?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Reaction {
    constructor(protected readonly _options: Reaction.Options) {}

    /**
     * @param {CommonApi.CreateThreadReactionRequest} request
     * @param {Reaction.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.reaction.createThreadReaction({
     *         thread_id: 1
     *     })
     */
    public createThreadReaction(
        request: CommonApi.CreateThreadReactionRequest,
        requestOptions?: Reaction.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.CreateThreadReactionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createThreadReaction(request, requestOptions));
    }

    private async __createThreadReaction(
        request: CommonApi.CreateThreadReactionRequest,
        requestOptions?: Reaction.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.CreateThreadReactionResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "CreateThreadReaction",
            ),
            method: "POST",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: { ...request, reaction: "like" },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as CommonApi.CreateThreadReactionResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling POST /CreateThreadReaction.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.CreateCommentReactionRequest} request
     * @param {Reaction.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.reaction.createCommentReaction({
     *         comment_id: 1
     *     })
     */
    public createCommentReaction(
        request: CommonApi.CreateCommentReactionRequest,
        requestOptions?: Reaction.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.CreateCommentReactionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createCommentReaction(request, requestOptions));
    }

    private async __createCommentReaction(
        request: CommonApi.CreateCommentReactionRequest,
        requestOptions?: Reaction.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.CreateCommentReactionResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "CreateCommentReaction",
            ),
            method: "POST",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: { ...request, reaction: "like" },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as CommonApi.CreateCommentReactionResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling POST /CreateCommentReaction.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.DeleteReactionRequest} request
     * @param {Reaction.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.reaction.deleteReaction({
     *         community_id: "community_id",
     *         reaction_id: 1
     *     })
     */
    public deleteReaction(
        request: CommonApi.DeleteReactionRequest,
        requestOptions?: Reaction.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.DeleteReactionResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteReaction(request, requestOptions));
    }

    private async __deleteReaction(
        request: CommonApi.DeleteReactionRequest,
        requestOptions?: Reaction.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.DeleteReactionResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "DeleteReaction",
            ),
            method: "POST",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.DeleteReactionResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling POST /DeleteReaction.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "x-api-key": apiKeyValue };
    }
}
