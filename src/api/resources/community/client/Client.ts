/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as CommonApi from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Community {
    export interface Options {
        environment?: core.Supplier<environments.CommonApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Override the address header */
        address?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the address header */
        address?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Community {
    constructor(protected readonly _options: Community.Options) {}

    /**
     * @param {CommonApi.GetCommunitiesRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.getCommunities()
     */
    public getCommunities(
        request: CommonApi.GetCommunitiesRequest = {},
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.GetCommunitiesResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getCommunities(request, requestOptions));
    }

    private async __getCommunities(
        request: CommonApi.GetCommunitiesRequest = {},
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.GetCommunitiesResponse>> {
        const {
            limit,
            cursor,
            order_by: orderBy,
            order_direction: orderDirection,
            relevance_by: relevanceBy,
            network,
            base,
            tag_ids: tagIds,
            include_node_info: includeNodeInfo,
            stake_enabled: stakeEnabled,
            has_groups: hasGroups,
            include_last_30_day_thread_count: includeLast30DayThreadCount,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit;
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (orderBy != null) {
            _queryParams["order_by"] = orderBy;
        }

        if (orderDirection != null) {
            _queryParams["order_direction"] = orderDirection;
        }

        if (relevanceBy != null) {
            _queryParams["relevance_by"] = relevanceBy;
        }

        if (network != null) {
            _queryParams["network"] = network;
        }

        if (base != null) {
            _queryParams["base"] = base;
        }

        if (tagIds != null) {
            if (Array.isArray(tagIds)) {
                _queryParams["tag_ids"] = tagIds.map((item) => item.toString());
            } else {
                _queryParams["tag_ids"] = tagIds.toString();
            }
        }

        if (includeNodeInfo != null) {
            _queryParams["include_node_info"] = includeNodeInfo.toString();
        }

        if (stakeEnabled != null) {
            _queryParams["stake_enabled"] = stakeEnabled.toString();
        }

        if (hasGroups != null) {
            _queryParams["has_groups"] = hasGroups.toString();
        }

        if (includeLast30DayThreadCount != null) {
            _queryParams["include_last_30_day_thread_count"] = includeLast30DayThreadCount.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "GetCommunities",
            ),
            method: "GET",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.GetCommunitiesResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling GET /GetCommunities.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.GetCommunityRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.getCommunity({
     *         id: "id"
     *     })
     */
    public getCommunity(
        request: CommonApi.GetCommunityRequest,
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.GetCommunityResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getCommunity(request, requestOptions));
    }

    private async __getCommunity(
        request: CommonApi.GetCommunityRequest,
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.GetCommunityResponse>> {
        const { id, include_node_info: includeNodeInfo } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["id"] = id;
        if (includeNodeInfo != null) {
            _queryParams["include_node_info"] = includeNodeInfo.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "GetCommunity",
            ),
            method: "GET",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.GetCommunityResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling GET /GetCommunity.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.GetMembersRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.getMembers({
     *         community_id: "community_id"
     *     })
     */
    public getMembers(
        request: CommonApi.GetMembersRequest,
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.GetMembersResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getMembers(request, requestOptions));
    }

    private async __getMembers(
        request: CommonApi.GetMembersRequest,
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.GetMembersResponse>> {
        const {
            limit,
            cursor,
            order_by: orderBy,
            order_direction: orderDirection,
            search,
            community_id: communityId,
            include_roles: includeRoles,
            memberships,
            include_group_ids: includeGroupIds,
            include_stake_balances: includeStakeBalances,
            allowedAddresses,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit;
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        if (orderBy != null) {
            _queryParams["order_by"] = orderBy;
        }

        if (orderDirection != null) {
            _queryParams["order_direction"] = orderDirection;
        }

        if (search != null) {
            _queryParams["search"] = search;
        }

        _queryParams["community_id"] = communityId;
        if (includeRoles != null) {
            _queryParams["include_roles"] = includeRoles.toString();
        }

        if (memberships != null) {
            _queryParams["memberships"] = memberships;
        }

        if (includeGroupIds != null) {
            _queryParams["include_group_ids"] = includeGroupIds.toString();
        }

        if (includeStakeBalances != null) {
            _queryParams["include_stake_balances"] = includeStakeBalances.toString();
        }

        if (allowedAddresses != null) {
            _queryParams["allowedAddresses"] = allowedAddresses;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "GetMembers",
            ),
            method: "GET",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.GetMembersResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling GET /GetMembers.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.GetTopicsRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.getTopics({
     *         community_id: "community_id"
     *     })
     */
    public getTopics(
        request: CommonApi.GetTopicsRequest,
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.GetTopicsResponseItem[]> {
        return core.HttpResponsePromise.fromPromise(this.__getTopics(request, requestOptions));
    }

    private async __getTopics(
        request: CommonApi.GetTopicsRequest,
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.GetTopicsResponseItem[]>> {
        const { community_id: communityId, with_contest_managers: withContestManagers } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["community_id"] = communityId;
        if (withContestManagers != null) {
            _queryParams["with_contest_managers"] = withContestManagers.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "GetTopics",
            ),
            method: "GET",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.GetTopicsResponseItem[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling GET /GetTopics.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.CreateCommunityRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.createCommunity({
     *         id: "id",
     *         name: "name",
     *         chain_node_id: 1,
     *         base: "cosmos",
     *         default_symbol: "default_symbol"
     *     })
     */
    public createCommunity(
        request: CommonApi.CreateCommunityRequest,
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.CreateCommunityResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createCommunity(request, requestOptions));
    }

    private async __createCommunity(
        request: CommonApi.CreateCommunityRequest,
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.CreateCommunityResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "CreateCommunity",
            ),
            method: "POST",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.CreateCommunityResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling POST /CreateCommunity.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.UpdateCommunityRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.updateCommunity({
     *         id: "id"
     *     })
     */
    public updateCommunity(
        request: CommonApi.UpdateCommunityRequest,
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.UpdateCommunityResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateCommunity(request, requestOptions));
    }

    private async __updateCommunity(
        request: CommonApi.UpdateCommunityRequest,
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.UpdateCommunityResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "UpdateCommunity",
            ),
            method: "POST",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.UpdateCommunityResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling POST /UpdateCommunity.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.CreateTopicRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.createTopic({
     *         community_id: "community_id"
     *     })
     */
    public createTopic(
        request: CommonApi.CreateTopicRequest,
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.CreateTopicResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createTopic(request, requestOptions));
    }

    private async __createTopic(
        request: CommonApi.CreateTopicRequest,
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.CreateTopicResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "CreateTopic",
            ),
            method: "POST",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.CreateTopicResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling POST /CreateTopic.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.UpdateTopicRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.updateTopic({
     *         topic_id: 1.1,
     *         community_id: "community_id"
     *     })
     */
    public updateTopic(
        request: CommonApi.UpdateTopicRequest,
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.UpdateTopicResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateTopic(request, requestOptions));
    }

    private async __updateTopic(
        request: CommonApi.UpdateTopicRequest,
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.UpdateTopicResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "UpdateTopic",
            ),
            method: "POST",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.UpdateTopicResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling POST /UpdateTopic.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.DeleteTopicRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.deleteTopic({
     *         community_id: "community_id",
     *         topic_id: 1
     *     })
     */
    public deleteTopic(
        request: CommonApi.DeleteTopicRequest,
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.DeleteTopicResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteTopic(request, requestOptions));
    }

    private async __deleteTopic(
        request: CommonApi.DeleteTopicRequest,
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.DeleteTopicResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "DeleteTopic",
            ),
            method: "POST",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.DeleteTopicResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling POST /DeleteTopic.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.CreateGroupRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.createGroup({
     *         community_id: "community_id",
     *         metadata: {
     *             name: "name",
     *             description: "description"
     *         }
     *     })
     */
    public createGroup(
        request: CommonApi.CreateGroupRequest,
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.CreateGroupResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createGroup(request, requestOptions));
    }

    private async __createGroup(
        request: CommonApi.CreateGroupRequest,
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.CreateGroupResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "CreateGroup",
            ),
            method: "POST",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.CreateGroupResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling POST /CreateGroup.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.UpdateGroupRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.updateGroup({
     *         community_id: "community_id",
     *         group_id: 1
     *     })
     */
    public updateGroup(
        request: CommonApi.UpdateGroupRequest,
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.UpdateGroupResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateGroup(request, requestOptions));
    }

    private async __updateGroup(
        request: CommonApi.UpdateGroupRequest,
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.UpdateGroupResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "UpdateGroup",
            ),
            method: "POST",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.UpdateGroupResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling POST /UpdateGroup.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.DeleteGroupRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.deleteGroup({
     *         community_id: "community_id",
     *         group_id: 1
     *     })
     */
    public deleteGroup(
        request: CommonApi.DeleteGroupRequest,
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.DeleteGroupResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteGroup(request, requestOptions));
    }

    private async __deleteGroup(
        request: CommonApi.DeleteGroupRequest,
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.DeleteGroupResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "DeleteGroup",
            ),
            method: "POST",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.DeleteGroupResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling POST /DeleteGroup.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.JoinCommunityRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.joinCommunity({
     *         community_id: "community_id"
     *     })
     */
    public joinCommunity(
        request: CommonApi.JoinCommunityRequest,
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.JoinCommunityResponse> {
        return core.HttpResponsePromise.fromPromise(this.__joinCommunity(request, requestOptions));
    }

    private async __joinCommunity(
        request: CommonApi.JoinCommunityRequest,
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.JoinCommunityResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "JoinCommunity",
            ),
            method: "POST",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.JoinCommunityResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling POST /JoinCommunity.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {CommonApi.BanAddressRequest} request
     * @param {Community.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.community.banAddress({
     *         community_id: "community_id",
     *         address: "address"
     *     })
     */
    public banAddress(
        request: CommonApi.BanAddressRequest,
        requestOptions?: Community.RequestOptions,
    ): core.HttpResponsePromise<CommonApi.BanAddressResponse> {
        return core.HttpResponsePromise.fromPromise(this.__banAddress(request, requestOptions));
    }

    private async __banAddress(
        request: CommonApi.BanAddressRequest,
        requestOptions?: Community.RequestOptions,
    ): Promise<core.WithRawResponse<CommonApi.BanAddressResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.CommonApiEnvironment.Default,
                "BanAddress",
            ),
            method: "POST",
            headers: {
                address:
                    (await core.Supplier.get(this._options.address)) != null
                        ? await core.Supplier.get(this._options.address)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@commonxyz/api-client",
                "X-Fern-SDK-Version": "2.1.1",
                "User-Agent": "@commonxyz/api-client/2.1.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CommonApi.BanAddressResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.CommonApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CommonApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CommonApiTimeoutError("Timeout exceeded when calling POST /BanAddress.");
            case "unknown":
                throw new errors.CommonApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "x-api-key": apiKeyValue };
    }
}
