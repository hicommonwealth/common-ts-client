/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as CommonApi from "../../../../api/index";
import * as core from "../../../../core";
import { GetThreadsResponseThreadsItemLinksItem } from "./GetThreadsResponseThreadsItemLinksItem";
import { GetThreadsResponseThreadsItemCreatedAt } from "./GetThreadsResponseThreadsItemCreatedAt";
import { GetThreadsResponseThreadsItemUpdatedAt } from "./GetThreadsResponseThreadsItemUpdatedAt";
import { GetThreadsResponseThreadsItemLastEdited } from "./GetThreadsResponseThreadsItemLastEdited";
import { GetThreadsResponseThreadsItemDeletedAt } from "./GetThreadsResponseThreadsItemDeletedAt";
import { GetThreadsResponseThreadsItemLastCommentedOn } from "./GetThreadsResponseThreadsItemLastCommentedOn";
import { GetThreadsResponseThreadsItemMarkedAsSpamAt } from "./GetThreadsResponseThreadsItemMarkedAsSpamAt";
import { GetThreadsResponseThreadsItemArchivedAt } from "./GetThreadsResponseThreadsItemArchivedAt";
import { GetThreadsResponseThreadsItemLockedAt } from "./GetThreadsResponseThreadsItemLockedAt";
import { GetThreadsResponseThreadsItemDiscordMeta } from "./GetThreadsResponseThreadsItemDiscordMeta";
import { GetThreadsResponseThreadsItemActivityRankDate } from "./GetThreadsResponseThreadsItemActivityRankDate";
import { GetThreadsResponseThreadsItemSearch } from "./GetThreadsResponseThreadsItemSearch";
import { GetThreadsResponseThreadsItemAddress } from "./GetThreadsResponseThreadsItemAddress";
import { GetThreadsResponseThreadsItemReaction } from "./GetThreadsResponseThreadsItemReaction";
import { GetThreadsResponseThreadsItemTopic } from "./GetThreadsResponseThreadsItemTopic";
import { GetThreadsResponseThreadsItemCollaboratorsItem } from "./GetThreadsResponseThreadsItemCollaboratorsItem";
import { GetThreadsResponseThreadsItemReactionsItem } from "./GetThreadsResponseThreadsItemReactionsItem";
import { GetThreadsResponseThreadsItemThreadVersionHistoriesItem } from "./GetThreadsResponseThreadsItemThreadVersionHistoriesItem";
import { GetThreadsResponseThreadsItemAssociatedContestsItem } from "./GetThreadsResponseThreadsItemAssociatedContestsItem";
import { GetThreadsResponseThreadsItemContestActionsItem } from "./GetThreadsResponseThreadsItemContestActionsItem";
import { GetThreadsResponseThreadsItemCommentsItem } from "./GetThreadsResponseThreadsItemCommentsItem";

export const GetThreadsResponseThreadsItem: core.serialization.ObjectSchema<
    serializers.GetThreadsResponseThreadsItem.Raw,
    CommonApi.GetThreadsResponseThreadsItem
> = core.serialization.object({
    id: core.serialization.number(),
    addressId: core.serialization.property("address_id", core.serialization.number()),
    title: core.serialization.string(),
    kind: core.serialization.string(),
    stage: core.serialization.string().optional(),
    body: core.serialization.string(),
    url: core.serialization.string().optional(),
    topicId: core.serialization.property("topic_id", core.serialization.number().optional()),
    pinned: core.serialization.boolean().optional(),
    communityId: core.serialization.property("community_id", core.serialization.string()),
    viewCount: core.serialization.property("view_count", core.serialization.number().optional()),
    links: core.serialization.list(GetThreadsResponseThreadsItemLinksItem).optional(),
    contentUrl: core.serialization.property("content_url", core.serialization.string().optional()),
    readOnly: core.serialization.property("read_only", core.serialization.boolean().optional()),
    hasPoll: core.serialization.property("has_poll", core.serialization.boolean().optional()),
    canvasSignedData: core.serialization.property("canvas_signed_data", core.serialization.string().optional()),
    canvasMsgId: core.serialization.property("canvas_msg_id", core.serialization.string().optional()),
    createdAt: core.serialization.property("created_at", GetThreadsResponseThreadsItemCreatedAt.optional()),
    updatedAt: core.serialization.property("updated_at", GetThreadsResponseThreadsItemUpdatedAt.optional()),
    lastEdited: core.serialization.property("last_edited", GetThreadsResponseThreadsItemLastEdited.optional()),
    deletedAt: core.serialization.property("deleted_at", GetThreadsResponseThreadsItemDeletedAt.optional()),
    lastCommentedOn: core.serialization.property(
        "last_commented_on",
        GetThreadsResponseThreadsItemLastCommentedOn.optional()
    ),
    markedAsSpamAt: core.serialization.property(
        "marked_as_spam_at",
        GetThreadsResponseThreadsItemMarkedAsSpamAt.optional()
    ),
    archivedAt: core.serialization.property("archived_at", GetThreadsResponseThreadsItemArchivedAt.optional()),
    lockedAt: core.serialization.property("locked_at", GetThreadsResponseThreadsItemLockedAt.optional()),
    discordMeta: core.serialization.property("discord_meta", GetThreadsResponseThreadsItemDiscordMeta.optional()),
    reactionCount: core.serialization.property("reaction_count", core.serialization.number().optional()),
    reactionWeightsSum: core.serialization.property("reaction_weights_sum", core.serialization.string().optional()),
    commentCount: core.serialization.property("comment_count", core.serialization.number().optional()),
    activityRankDate: core.serialization.property(
        "activity_rank_date",
        GetThreadsResponseThreadsItemActivityRankDate.optional()
    ),
    createdBy: core.serialization.property("created_by", core.serialization.string().optional()),
    profileName: core.serialization.property("profile_name", core.serialization.string().optional()),
    search: GetThreadsResponseThreadsItemSearch,
    address: core.serialization.property("Address", GetThreadsResponseThreadsItemAddress.optional()),
    reaction: core.serialization.property("Reaction", GetThreadsResponseThreadsItemReaction.optional()),
    topic: GetThreadsResponseThreadsItemTopic.optional(),
    collaborators: core.serialization.list(GetThreadsResponseThreadsItemCollaboratorsItem).optional(),
    reactions: core.serialization.list(GetThreadsResponseThreadsItemReactionsItem).optional(),
    threadVersionHistories: core.serialization.property(
        "ThreadVersionHistories",
        core.serialization.list(GetThreadsResponseThreadsItemThreadVersionHistoriesItem).optional()
    ),
    associatedContests: core.serialization.list(GetThreadsResponseThreadsItemAssociatedContestsItem).optional(),
    contestActions: core.serialization.property(
        "ContestActions",
        core.serialization.list(GetThreadsResponseThreadsItemContestActionsItem).optional()
    ),
    comments: core.serialization.property(
        "Comments",
        core.serialization.list(GetThreadsResponseThreadsItemCommentsItem).optional()
    ),
});

export declare namespace GetThreadsResponseThreadsItem {
    interface Raw {
        id: number;
        address_id: number;
        title: string;
        kind: string;
        stage?: string | null;
        body: string;
        url?: string | null;
        topic_id?: number | null;
        pinned?: boolean | null;
        community_id: string;
        view_count?: number | null;
        links?: GetThreadsResponseThreadsItemLinksItem.Raw[] | null;
        content_url?: string | null;
        read_only?: boolean | null;
        has_poll?: boolean | null;
        canvas_signed_data?: string | null;
        canvas_msg_id?: string | null;
        created_at?: GetThreadsResponseThreadsItemCreatedAt.Raw | null;
        updated_at?: GetThreadsResponseThreadsItemUpdatedAt.Raw | null;
        last_edited?: GetThreadsResponseThreadsItemLastEdited.Raw | null;
        deleted_at?: GetThreadsResponseThreadsItemDeletedAt.Raw | null;
        last_commented_on?: GetThreadsResponseThreadsItemLastCommentedOn.Raw | null;
        marked_as_spam_at?: GetThreadsResponseThreadsItemMarkedAsSpamAt.Raw | null;
        archived_at?: GetThreadsResponseThreadsItemArchivedAt.Raw | null;
        locked_at?: GetThreadsResponseThreadsItemLockedAt.Raw | null;
        discord_meta?: GetThreadsResponseThreadsItemDiscordMeta.Raw | null;
        reaction_count?: number | null;
        reaction_weights_sum?: string | null;
        comment_count?: number | null;
        activity_rank_date?: GetThreadsResponseThreadsItemActivityRankDate.Raw | null;
        created_by?: string | null;
        profile_name?: string | null;
        search: GetThreadsResponseThreadsItemSearch.Raw;
        Address?: GetThreadsResponseThreadsItemAddress.Raw | null;
        Reaction?: GetThreadsResponseThreadsItemReaction.Raw | null;
        topic?: GetThreadsResponseThreadsItemTopic.Raw | null;
        collaborators?: GetThreadsResponseThreadsItemCollaboratorsItem.Raw[] | null;
        reactions?: GetThreadsResponseThreadsItemReactionsItem.Raw[] | null;
        ThreadVersionHistories?: GetThreadsResponseThreadsItemThreadVersionHistoriesItem.Raw[] | null;
        associatedContests?: GetThreadsResponseThreadsItemAssociatedContestsItem.Raw[] | null;
        ContestActions?: GetThreadsResponseThreadsItemContestActionsItem.Raw[] | null;
        Comments?: GetThreadsResponseThreadsItemCommentsItem.Raw[] | null;
    }
}
