/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as CommonApi from "../../../../api/index";
import * as core from "../../../../core";
import { GetGlobalActivityResponseResultsItemDiscordMeta } from "./GetGlobalActivityResponseResultsItemDiscordMeta";
import { GetGlobalActivityResponseResultsItemTopic } from "./GetGlobalActivityResponseResultsItemTopic";
import { GetGlobalActivityResponseResultsItemRecentCommentsItem } from "./GetGlobalActivityResponseResultsItemRecentCommentsItem";

export const GetGlobalActivityResponseResultsItem: core.serialization.ObjectSchema<
    serializers.GetGlobalActivityResponseResultsItem.Raw,
    CommonApi.GetGlobalActivityResponseResultsItem
> = core.serialization.object({
    communityId: core.serialization.property("community_id", core.serialization.string()),
    communityIcon: core.serialization.property("community_icon", core.serialization.string().optional()),
    id: core.serialization.number(),
    userId: core.serialization.property("user_id", core.serialization.number()),
    userAddress: core.serialization.property("user_address", core.serialization.string()),
    profileName: core.serialization.property("profile_name", core.serialization.string().optional()),
    profileAvatar: core.serialization.property("profile_avatar", core.serialization.string().optional()),
    body: core.serialization.string(),
    contentUrl: core.serialization.property("content_url", core.serialization.string().optional()),
    title: core.serialization.string(),
    kind: core.serialization.string(),
    stage: core.serialization.string(),
    numberOfComments: core.serialization.property("number_of_comments", core.serialization.number()),
    createdAt: core.serialization.property("created_at", core.serialization.string().optional()),
    updatedAt: core.serialization.property("updated_at", core.serialization.string().optional()),
    deletedAt: core.serialization.property("deleted_at", core.serialization.string().optional()),
    lockedAt: core.serialization.property("locked_at", core.serialization.string().optional()),
    archivedAt: core.serialization.property("archived_at", core.serialization.string().optional()),
    markedAsSpamAt: core.serialization.property("marked_as_spam_at", core.serialization.string().optional()),
    readOnly: core.serialization.property("read_only", core.serialization.boolean()),
    hasPoll: core.serialization.property("has_poll", core.serialization.boolean().optional()),
    discordMeta: core.serialization.property(
        "discord_meta",
        GetGlobalActivityResponseResultsItemDiscordMeta.optional()
    ),
    topic: GetGlobalActivityResponseResultsItemTopic,
    recentComments: core.serialization.property(
        "recent_comments",
        core.serialization.list(GetGlobalActivityResponseResultsItemRecentCommentsItem).optional()
    ),
});

export declare namespace GetGlobalActivityResponseResultsItem {
    interface Raw {
        community_id: string;
        community_icon?: string | null;
        id: number;
        user_id: number;
        user_address: string;
        profile_name?: string | null;
        profile_avatar?: string | null;
        body: string;
        content_url?: string | null;
        title: string;
        kind: string;
        stage: string;
        number_of_comments: number;
        created_at?: string | null;
        updated_at?: string | null;
        deleted_at?: string | null;
        locked_at?: string | null;
        archived_at?: string | null;
        marked_as_spam_at?: string | null;
        read_only: boolean;
        has_poll?: boolean | null;
        discord_meta?: GetGlobalActivityResponseResultsItemDiscordMeta.Raw | null;
        topic: GetGlobalActivityResponseResultsItemTopic.Raw;
        recent_comments?: GetGlobalActivityResponseResultsItemRecentCommentsItem.Raw[] | null;
    }
}
