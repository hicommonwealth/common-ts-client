/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as CommonApi from "../../../../api/index";
import * as core from "../../../../core";
import { CreateCommunityResponseCommunityChainNodeBalanceType } from "./CreateCommunityResponseCommunityChainNodeBalanceType";
import { CreateCommunityResponseCommunityChainNodeCosmosGovVersion } from "./CreateCommunityResponseCommunityChainNodeCosmosGovVersion";
import { CreateCommunityResponseCommunityChainNodeHealth } from "./CreateCommunityResponseCommunityChainNodeHealth";
import { CreateCommunityResponseCommunityChainNodeContractsItem } from "./CreateCommunityResponseCommunityChainNodeContractsItem";

export const CreateCommunityResponseCommunityChainNode: core.serialization.ObjectSchema<
    serializers.CreateCommunityResponseCommunityChainNode.Raw,
    CommonApi.CreateCommunityResponseCommunityChainNode
> = core.serialization.object({
    id: core.serialization.number().optional(),
    url: core.serialization.string().optional(),
    ethChainId: core.serialization.property("eth_chain_id", core.serialization.number().optional()),
    altWalletUrl: core.serialization.property("alt_wallet_url", core.serialization.string().optional()),
    privateUrl: core.serialization.property("private_url", core.serialization.string().optional()),
    balanceType: core.serialization.property(
        "balance_type",
        CreateCommunityResponseCommunityChainNodeBalanceType.optional()
    ),
    name: core.serialization.string().optional(),
    description: core.serialization.string().optional(),
    ss58: core.serialization.number().optional(),
    bech32: core.serialization.string().optional(),
    slip44: core.serialization.number().optional(),
    cosmosChainId: core.serialization.property("cosmos_chain_id", core.serialization.string().optional()),
    cosmosGovVersion: core.serialization.property(
        "cosmos_gov_version",
        CreateCommunityResponseCommunityChainNodeCosmosGovVersion.optional()
    ),
    health: CreateCommunityResponseCommunityChainNodeHealth.optional(),
    contracts: core.serialization.list(CreateCommunityResponseCommunityChainNodeContractsItem).optional(),
    blockExplorer: core.serialization.property("block_explorer", core.serialization.string().optional()),
    maxCeBlockRange: core.serialization.property("max_ce_block_range", core.serialization.number().optional()),
    createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
    updatedAt: core.serialization.property("updated_at", core.serialization.date().optional()),
});

export declare namespace CreateCommunityResponseCommunityChainNode {
    interface Raw {
        id?: number | null;
        url?: string | null;
        eth_chain_id?: number | null;
        alt_wallet_url?: string | null;
        private_url?: string | null;
        balance_type?: CreateCommunityResponseCommunityChainNodeBalanceType.Raw | null;
        name?: string | null;
        description?: string | null;
        ss58?: number | null;
        bech32?: string | null;
        slip44?: number | null;
        cosmos_chain_id?: string | null;
        cosmos_gov_version?: CreateCommunityResponseCommunityChainNodeCosmosGovVersion.Raw | null;
        health?: CreateCommunityResponseCommunityChainNodeHealth.Raw | null;
        contracts?: CreateCommunityResponseCommunityChainNodeContractsItem.Raw[] | null;
        block_explorer?: string | null;
        max_ce_block_range?: number | null;
        created_at?: string | null;
        updated_at?: string | null;
    }
}
