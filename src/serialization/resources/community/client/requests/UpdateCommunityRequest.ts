/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as CommonApi from "../../../../../api/index";
import * as core from "../../../../../core";
import { UpdateCommunityRequestBase } from "../../types/UpdateCommunityRequestBase";
import { UpdateCommunityRequestType } from "../../types/UpdateCommunityRequestType";
import { UpdateCommunityRequestSocialLinksItem } from "../../types/UpdateCommunityRequestSocialLinksItem";
import { UpdateCommunityRequestDefaultPage } from "../../types/UpdateCommunityRequestDefaultPage";
import { UpdateCommunityRequestHasHomepage } from "../../types/UpdateCommunityRequestHasHomepage";
import { UpdateCommunityRequestTerms } from "../../types/UpdateCommunityRequestTerms";
import { UpdateCommunityRequestAddressesItem } from "../../types/UpdateCommunityRequestAddressesItem";
import { UpdateCommunityRequestCommunityStakesItem } from "../../types/UpdateCommunityRequestCommunityStakesItem";
import { UpdateCommunityRequestCommunityTagsItem } from "../../types/UpdateCommunityRequestCommunityTagsItem";
import { UpdateCommunityRequestChainNode } from "../../types/UpdateCommunityRequestChainNode";
import { UpdateCommunityRequestTopicsItem } from "../../types/UpdateCommunityRequestTopicsItem";
import { UpdateCommunityRequestGroupsItem } from "../../types/UpdateCommunityRequestGroupsItem";
import { UpdateCommunityRequestContestManagersItem } from "../../types/UpdateCommunityRequestContestManagersItem";
import { UpdateCommunityRequestSnapshot } from "../../types/UpdateCommunityRequestSnapshot";

export const UpdateCommunityRequest: core.serialization.Schema<
    serializers.UpdateCommunityRequest.Raw,
    CommonApi.UpdateCommunityRequest
> = core.serialization.object({
    name: core.serialization.string().optional(),
    chainNodeId: core.serialization.property("chain_node_id", core.serialization.number().optional()),
    defaultSymbol: core.serialization.property("default_symbol", core.serialization.string().optional()),
    base: UpdateCommunityRequestBase.optional(),
    iconUrl: core.serialization.property("icon_url", core.serialization.string().optional()),
    active: core.serialization.boolean().optional(),
    type: UpdateCommunityRequestType.optional(),
    description: core.serialization.string().optional(),
    socialLinks: core.serialization.property(
        "social_links",
        core.serialization.list(UpdateCommunityRequestSocialLinksItem).optional()
    ),
    ss58Prefix: core.serialization.property("ss58_prefix", core.serialization.number().optional()),
    stagesEnabled: core.serialization.property("stages_enabled", core.serialization.boolean().optional()),
    customStages: core.serialization.property(
        "custom_stages",
        core.serialization.list(core.serialization.string()).optional()
    ),
    blockExplorerIds: core.serialization.property("block_explorer_ids", core.serialization.string().optional()),
    collapsedOnHomepage: core.serialization.property("collapsed_on_homepage", core.serialization.boolean().optional()),
    defaultSummaryView: core.serialization.property("default_summary_view", core.serialization.boolean().optional()),
    defaultPage: core.serialization.property("default_page", UpdateCommunityRequestDefaultPage.optional()),
    hasHomepage: core.serialization.property("has_homepage", UpdateCommunityRequestHasHomepage.optional()),
    terms: UpdateCommunityRequestTerms.optional(),
    adminOnlyPolling: core.serialization.property("admin_only_polling", core.serialization.boolean().optional()),
    bech32Prefix: core.serialization.property("bech32_prefix", core.serialization.string().optional()),
    hideProjects: core.serialization.property("hide_projects", core.serialization.boolean().optional()),
    tokenName: core.serialization.property("token_name", core.serialization.string().optional()),
    ceVerbose: core.serialization.property("ce_verbose", core.serialization.boolean().optional()),
    discordConfigId: core.serialization.property("discord_config_id", core.serialization.number().optional()),
    category: core.serialization.unknown().optional(),
    discordBotWebhooksEnabled: core.serialization.property(
        "discord_bot_webhooks_enabled",
        core.serialization.boolean().optional()
    ),
    directoryPageEnabled: core.serialization.property(
        "directory_page_enabled",
        core.serialization.boolean().optional()
    ),
    directoryPageChainNodeId: core.serialization.property(
        "directory_page_chain_node_id",
        core.serialization.number().optional()
    ),
    namespace: core.serialization.string().optional(),
    namespaceAddress: core.serialization.property("namespace_address", core.serialization.string().optional()),
    redirect: core.serialization.string().optional(),
    snapshotSpaces: core.serialization.property(
        "snapshot_spaces",
        core.serialization.list(core.serialization.string()).optional()
    ),
    includeInDigestEmail: core.serialization.property(
        "include_in_digest_email",
        core.serialization.boolean().optional()
    ),
    profileCount: core.serialization.property("profile_count", core.serialization.number().optional()),
    lifetimeThreadCount: core.serialization.property("lifetime_thread_count", core.serialization.number().optional()),
    bannerText: core.serialization.property("banner_text", core.serialization.string().optional()),
    createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
    updatedAt: core.serialization.property("updated_at", core.serialization.date().optional()),
    addresses: core.serialization.property(
        "Addresses",
        core.serialization.list(UpdateCommunityRequestAddressesItem).optional()
    ),
    communityStakes: core.serialization.property(
        "CommunityStakes",
        core.serialization.list(UpdateCommunityRequestCommunityStakesItem).optional()
    ),
    communityTags: core.serialization.property(
        "CommunityTags",
        core.serialization.list(UpdateCommunityRequestCommunityTagsItem).optional()
    ),
    chainNode: core.serialization.property("ChainNode", UpdateCommunityRequestChainNode.optional()),
    topics: core.serialization.list(UpdateCommunityRequestTopicsItem).optional(),
    groups: core.serialization.list(UpdateCommunityRequestGroupsItem).optional(),
    contestManagers: core.serialization.property(
        "contest_managers",
        core.serialization.list(UpdateCommunityRequestContestManagersItem).optional()
    ),
    communityId: core.serialization.property("community_id", core.serialization.string()),
    featuredTopics: core.serialization.list(core.serialization.string()).optional(),
    snapshot: UpdateCommunityRequestSnapshot.optional(),
    transactionHash: core.serialization.string().optional(),
});

export declare namespace UpdateCommunityRequest {
    interface Raw {
        name?: string | null;
        chain_node_id?: number | null;
        default_symbol?: string | null;
        base?: UpdateCommunityRequestBase.Raw | null;
        icon_url?: string | null;
        active?: boolean | null;
        type?: UpdateCommunityRequestType.Raw | null;
        description?: string | null;
        social_links?: UpdateCommunityRequestSocialLinksItem.Raw[] | null;
        ss58_prefix?: number | null;
        stages_enabled?: boolean | null;
        custom_stages?: string[] | null;
        block_explorer_ids?: string | null;
        collapsed_on_homepage?: boolean | null;
        default_summary_view?: boolean | null;
        default_page?: UpdateCommunityRequestDefaultPage.Raw | null;
        has_homepage?: UpdateCommunityRequestHasHomepage.Raw | null;
        terms?: UpdateCommunityRequestTerms.Raw | null;
        admin_only_polling?: boolean | null;
        bech32_prefix?: string | null;
        hide_projects?: boolean | null;
        token_name?: string | null;
        ce_verbose?: boolean | null;
        discord_config_id?: number | null;
        category?: unknown | null;
        discord_bot_webhooks_enabled?: boolean | null;
        directory_page_enabled?: boolean | null;
        directory_page_chain_node_id?: number | null;
        namespace?: string | null;
        namespace_address?: string | null;
        redirect?: string | null;
        snapshot_spaces?: string[] | null;
        include_in_digest_email?: boolean | null;
        profile_count?: number | null;
        lifetime_thread_count?: number | null;
        banner_text?: string | null;
        created_at?: string | null;
        updated_at?: string | null;
        Addresses?: UpdateCommunityRequestAddressesItem.Raw[] | null;
        CommunityStakes?: UpdateCommunityRequestCommunityStakesItem.Raw[] | null;
        CommunityTags?: UpdateCommunityRequestCommunityTagsItem.Raw[] | null;
        ChainNode?: UpdateCommunityRequestChainNode.Raw | null;
        topics?: UpdateCommunityRequestTopicsItem.Raw[] | null;
        groups?: UpdateCommunityRequestGroupsItem.Raw[] | null;
        contest_managers?: UpdateCommunityRequestContestManagersItem.Raw[] | null;
        community_id: string;
        featuredTopics?: string[] | null;
        snapshot?: UpdateCommunityRequestSnapshot.Raw | null;
        transactionHash?: string | null;
    }
}
